/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Name = string;
export type Method = string;
export type Tag = string | null;
export type Handler = string | null;
export type Events = Event[];
export type Id = string;
export type Name1 = string;
export type TimeLeft = number;
export type Valid = boolean;
export type CooldownDuration = number;
export type Stack = number | null;
export type Id1 = string;
export type Name2 = string;
export type TimeLeft1 = number;
export type LastingDuration = number;
export type Stack1 = number | null;
export type Str = number;
export type Luk = number;
export type Int = number;
export type Dex = number;
export type StrMultiplier = number;
export type LukMultiplier = number;
export type IntMultiplier = number;
export type DexMultiplier = number;
export type StrStatic = number;
export type LukStatic = number;
export type IntStatic = number;
export type DexStatic = number;
export type AttackPower = number;
export type MagicAttack = number;
export type AttackPowerMultiplier = number;
export type MagicAttackMultiplier = number;
export type CriticalRate = number;
export type CriticalDamage = number;
export type BossDamageMultiplier = number;
export type DamageMultiplier = number;
export type FinalDamageMultiplier = number;
export type IgnoredDefence = number;
export type Mhp = number;
export type Mmp = number;
export type MhpMultiplier = number;
export type MmpMultiplier = number;
export type ElementalResistance = number;
export type Name3 = string;
export type Method1 = string;
export type Payload1 =
  | number
  | string
  | {
      [k: string]: unknown;
    }
  | null;
export type Clock = number;
export type Name4 = string;
export type Damage = number;
export type Hit = number;
export type Tag1 = string;
export type DamageLogs = DamageLog[];
export type Accepted = boolean;
export type TimeSeries = SimulationEntry[];
export type Clock1 = number;
export type Delay = number;
export type Damage1 = number;
export type Name5 = string;
export type Damage2 = number;
export type Damages = DamageTuple[];
export type Logs = PlayLogResponse[];
export type Hash = string;
export type PreviousHash = string;
export type Command = string;
export type Name6 = string;
export type Time = number | null;
export type Expr = string;
export type Index = number;

export interface OperationLogResponse {
  logs: Logs;
  hash: Hash;
  previous_hash: PreviousHash;
  operation: Operation;
  index: Index;
  [k: string]: unknown;
}
export interface PlayLogResponse {
  events: Events;
  validity_view: ValidityView;
  running_view: RunningView;
  buff_view: Stat;
  report: _Report;
  clock: Clock1;
  delay: Delay;
  action: Action;
  checkpoint: Checkpoint;
  damage: Damage1;
  damages: Damages;
  [k: string]: unknown;
}
/**
 * Event is primitive value-object, which indicated
 * "something happened" via action-handlers.
 *
 * Event may verbose; Any applications will watch event stream to
 * take some activities. Actions are only for internal state-change;
 * only events are externally shown.
 */
export interface Event {
  name: Name;
  payload: Payload;
  method: Method;
  tag: Tag;
  handler: Handler;
  [k: string]: unknown;
}
export interface Payload {
  [k: string]: unknown;
}
export interface ValidityView {
  [k: string]: Validity;
}
export interface Validity {
  id: Id;
  name: Name1;
  time_left: TimeLeft;
  valid: Valid;
  cooldown_duration: CooldownDuration;
  stack?: Stack;
  [k: string]: unknown;
}
export interface RunningView {
  [k: string]: Running;
}
export interface Running {
  id: Id1;
  name: Name2;
  time_left: TimeLeft1;
  lasting_duration: LastingDuration;
  stack?: Stack1;
  [k: string]: unknown;
}
export interface Stat {
  STR?: Str;
  LUK?: Luk;
  INT?: Int;
  DEX?: Dex;
  STR_multiplier?: StrMultiplier;
  LUK_multiplier?: LukMultiplier;
  INT_multiplier?: IntMultiplier;
  DEX_multiplier?: DexMultiplier;
  STR_static?: StrStatic;
  LUK_static?: LukStatic;
  INT_static?: IntStatic;
  DEX_static?: DexStatic;
  attack_power?: AttackPower;
  magic_attack?: MagicAttack;
  attack_power_multiplier?: AttackPowerMultiplier;
  magic_attack_multiplier?: MagicAttackMultiplier;
  critical_rate?: CriticalRate;
  critical_damage?: CriticalDamage;
  boss_damage_multiplier?: BossDamageMultiplier;
  damage_multiplier?: DamageMultiplier;
  final_damage_multiplier?: FinalDamageMultiplier;
  ignored_defence?: IgnoredDefence;
  MHP?: Mhp;
  MMP?: Mmp;
  MHP_multiplier?: MhpMultiplier;
  MMP_multiplier?: MmpMultiplier;
  elemental_resistance?: ElementalResistance;
  [k: string]: unknown;
}
/**
 * For backward Compat. only (this is redundant)
 */
export interface _Report {
  time_series: TimeSeries;
  [k: string]: unknown;
}
export interface SimulationEntry {
  action: Action;
  clock: Clock;
  damage_logs: DamageLogs;
  accepted: Accepted;
  [k: string]: unknown;
}
/**
 * Action is primitive value-object which indicated
 * what `Component` and Which `method` will be triggerd.
 */
export interface Action {
  name: Name3;
  method: Method1;
  payload: Payload1;
  [k: string]: unknown;
}
export interface DamageLog {
  name: Name4;
  damage: Damage;
  hit: Hit;
  buff: Stat;
  tag: Tag1;
  [k: string]: unknown;
}
export interface Checkpoint {
  store_ckpt: StoreCkpt;
  [k: string]: unknown;
}
export interface StoreCkpt {
  [k: string]: unknown;
}
export interface DamageTuple {
  name: Name5;
  damage: Damage2;
  [k: string]: unknown;
}
/**
 * Operand is an aggregation of meaningful actions.
 * An operand can contain one or more actions; This meant
 * only operand-to-action translation is possible.
 */
export interface Operation {
  command: Command;
  name: Name6;
  time?: Time;
  expr?: Expr;
  [k: string]: unknown;
}
