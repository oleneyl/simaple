
[tool.poe.tasks.setup-webui-whl]
shell = """
import hashlib, os, shutil

builtin_whl_fname = [ fname for fname in os.listdir("dist") if fname.endswith(".whl") ][-1]
h  = hashlib.sha256()
b  = bytearray(128*1024)
mv = memoryview(b)

with open(os.path.join("dist", builtin_whl_fname), 'rb', buffering=0) as f:
    while n := f.readinto(mv):
        h.update(mv[:n])
    digest = h.hexdigest()[:8]

output_whl_file_name = f"simaple-0.0.0dev+local{digest}-py3-none-any.whl"

shutil.copy(os.path.join("dist", builtin_whl_fname), os.path.join("webui/public", output_whl_file_name))
with open("webui/src/sdk/dependency.ts", 'w') as f:
    f.write(f'export const SIMAPLE_FILE_NAME = "{output_whl_file_name}"')
"""
interpreter = "python"

[tool.poe.tasks]
_black-check = "black --check simaple tests"
_isort-check = "isort --check-only simaple tests"
formatting-check = ["_black-check", "_isort-check"]

_build = "pyproject-build"


_clean_dist_build = "rm -rf dist/ webui/public/*.whl"
export-whl = ["_clean_dist_build", "_build", "setup-webui-whl"]
gen-schema = "python scripts/build/generate_json_schema_for_wasm.py"

_black = "black simaple tests scripts"
_isort = "isort simaple tests scripts"
format = ["_black", "_isort"]

_ruff = "ruff simaple tests scripts"
lint = ["_ruff"]

coverage = "pytest --cov=simaple"
coverage-report = "pytest --cov=simaple --cov-report=xml"

unittest = "pytest -vv -x tests/"
test_wasm = "pytest -vv -x tests/wasm"
test_data = "pytest -vv -x test_data/"
test_data_review = "pytest -vv -x test_data/ tests/simulate/policy/test_dsl_runtime.py --inline-snapshot=review"
test_data_watch = "ptw . --patterns '*.py,*.yaml' test_data/ tests/simulate/policy/test_dsl_runtime.py --inline-snapshot=review"
rsctest = "pytest -vv -x test_resource/"
typetest = "mypy simaple tests"
simulatetest = "pytest -vv -x tests/simulate"
clean = "rm -rf **/__pycache__ .coverage .mypy_cache .pytest_cache"
test = ["coverage", "typetest", "lint", "formatting-check"]

[tool.black]

[tool.isort]
profile = "black"
multi_line_output = 3
skip = "third_party"

[tool.pytest.ini_options]
addopts = "-vv -x"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
omit = ["simaple/app/*"]

[tool.coverage.report]
fail_under = 85
show_missing = true

[tool.coverage.xml]
output = "coverage-reports/coverage.xml"


[tool.poetry.scripts]
simaple-simulate = 'scripts.simulate:run_from_cli'

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
incremental = false
disable_error_code = "misc"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "sklearn.linear_model",
    "sklearn.pipeline",
    "sklearn.preprocessing",
    "functional",
]

[tool.poetry]
name = "simaple"
version = "0.4.2"
description = "Maplestory calculation / Simulation library"
authors = ["meson324 <meson324@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/simaple-team/simaple"

[tool.poetry.dependencies]
python = ">=3.10, <3.13"
pydantic = "^2.4.2"
loguru = "^0.5.3"
PyYAML = "^6.0"
numpy = "^1.22.3"
scikit-learn = "^1.0.2"
aiohttp = "^3.10.1"
requests = "^2.26.0"
fire = "^0.4.0"
SQLAlchemy = "^1.4.45"
scipy = "^1.11.2"
pydantic-settings = "^2.0.3"
lark = "^1.1.7"
pyfunctional = "^1.5.0"

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.28.0"
jupyter = "^1.0.0"
pycln = "^2.1.2"
yappi = "^1.4.0"
snakeviz = "^2.1.1"
types-requests = "^2.31.0.1"
mypy = "1.8.0"
ruff = "^0.1.9"
Sphinx = "^5.1.1"
sphinx-rtd-theme = "^1.0.0"
readthedocs-sphinx-ext = "^2.2.0"
isort = "^5.9.3"
coverage = "^6.0.2"
black = "^24.4"
pytest-cov = "^3.0.0"
build = "^0.8.0"
twine = "^5.0.1"
pytest = "7.4.2"
pytest-asyncio = "^0.23.2"
types-PyYAML = "^6.0.4"
inline-snapshot = "^0.13.3"
pytest-watcher = "^0.4.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
